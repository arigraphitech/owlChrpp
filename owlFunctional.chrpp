#include <iostream>
#include <string>
#include <vector>
#include <chrpp.hh>
#include "stringType.h"
#include <options.hpp>
const std::string owlThing = "owl:Thing";
const std::string owlNothing = "owl:Nothing";

/**
 * Hash data structure needed for std::string
 */

namespace chr {
template<>
  struct Type_instruction_wrapper<std::vector<std::string>::iterator, false> {
      static std::string to_string(const std::vector<std::string>::iterator& it) {
          return *it;
      }
      static void update_hash(const std::vector<std::string>::iterator&) {}
      static bool is_equal(const std::vector<std::string>::iterator& a,
                           const std::vector<std::string>::iterator& b) {
          return a == b;
      }
  };
}
using iterator = std::vector<std::string>::iterator;

bool guard_condition(const std::string& A, const std::string& B, const std::string& C) {
    return A != B && B != C && A != C;
}

bool different(const std::string& A, const std::string& B){
    return A!=B;
}

void afficher(std::string x){
    std::cout<<x<<std::endl;
}

void afficherIndice(int i) {
    std::cout << i << std::endl;
}
bool contains(const std::string& x,const std::vector<std::string> & l){
    if (std::find(l.begin(), l.end(), x) != l.end()) 
    {  return true;}
    return false;
}



/**
*
*\ingroup Examples


<CHR name="OWL2">
    // === Contraintes ===
    <chr_constraint>
            owlPrefix(+std::string,+std::string),
			owlClass(+std::string),
			owlObjectProperty(+std::string),
			owlDataProperty(+std::string),
            owlNamedIndividual(+std::string),
			owlSubclassOf(+std::string,+std::string),
			owlEquivalentClass(+std::string,+std::string),
			owlSubPropertyOf(+std::string,+std::string),
			owlEquivalentProperty(+std::string,+std::string),
			owlObjectPropertyDomain(+std::string,+std::string),
			owlObjectPropertyRange(+std::string,+std::string),
			owlClassAssertion(+std::string,+std::string),
			owlDisjointClass(+std::vector <[std::string]>),
            owlNegativeObjectAssertion(+std::string,+std::string,+std::string),
            owlObjectPropertyAssertion(+std::string,+std::string,+std::string),
            owlSameIndividual(+std::string,+std::string),
            owlDifferentIndividual(+std::string,+std::string),
            owlInverseObjectProperty(+std::string,+std::string),
            owlSymmetricObjectProperty(+std::string),
            owlAsymmetricObjectProperty(+std::string),
            owlDisjointObjectProperty(+std::vector <[std::string]>),
            owlReflexiveObjectProperty(+std::string),
            owlIrreflexiveObjectProperty(+std::string),
            owlFunctionalObjectProperty(+std::string),
            owlInverseFunctionalObjectProperty(+std::string),
            owlTransitiveObjectProperty(+std::string),
            owlDataPropertyAssertion(+std::string,+std::string,+Value),
            querySuperClassOf(+std::string),
            querySubClassOf(+std::string),
            queryClassification(+std::string),
            res(+std::string),
            pop(+std::string,+iterator,+iterator),
            popInd(+iterator,+iterator,+int),
            liste(+std::string,+std::string),
            listeInd(+iterator,+std::string,+int),
            owlUnionClass(+std::string,+std::string),
            owlUnionOf(+std::string,+iterator,+iterator),
            owlIntersectionClass(+std::string,+std::string,+int),
            owlIntersectionOf(+std::string,+iterator,+iterator,+int),
            owlCandidatsIntersection(+std::string,+std::string,+int)

//suppression des doublons
res(X) #passive \ res(X) <=> true ;;
owlClass(C) #passive \ owlClass(C) <=> true ;;
owlObjectProperty(P) #passive \ owlObjectProperty(P) <=> true ;;
owlDataProperty(P) #passive \ owlDataProperty(P) <=> true ;;
owlObjectPropertyDomain(P,C) #passive \ owlObjectPropertyDomain(P,C) <=> true ;;
owlObjectPropertyRange(P,C) #passive \ owlObjectPropertyRange(P,C) <=> true ;;
owlDisjointClass(L) #passive \ owlDisjointClass(L) <=> true ;;
owlNegativeObjectAssertion(X,P,Y) #passive \ owlNegativeObjectAssertion(X,P,Y) <=> true ;;
owlDisjointObjectProperty(L) #passive \ owlDisjointObjectProperty(L) <=> true ;;
owlSameIndividual(X,Y) #passive \ owlSameIndividual(X,Y) <=> true ;;
owlDifferentIndividual(X,Y) #passive \ owlDifferentIndividual(X,Y) <=> true ;;
owlInverseObjectProperty(P1,P2) #passive \ owlInverseObjectProperty(P1,P2) <=> true ;;
owlSymmetricObjectProperty(P) #passive \ owlSymmetricObjectProperty(P) <=> true ;;
owlAsymmetricObjectProperty(P) #passive \ owlAsymmetricObjectProperty(P) <=> true ;;
owlReflexiveObjectProperty(P) #passive \ owlReflexiveObjectProperty(P) <=> true ;;
owlIrreflexiveObjectProperty(P) #passive \ owlIrreflexiveObjectProperty(P) <=> true ;;
owlFunctionalObjectProperty(P) #passive \ owlFunctionalObjectProperty(P) <=> true ;;
owlInverseFunctionalObjectProperty(P) #passive \ owlInverseFunctionalObjectProperty(P) <=> true ;;
owlTransitiveObjectProperty(P) #passive \ owlTransitiveObjectProperty(P) <=> true ;;
owlSubclassOf(A,B) #passive \ owlSubclassOf(A,B) <=> true ;;
owlSubPropertyOf(A,B) #passive \ owlSubPropertyOf(A,B) <=> true ;;
owlClassAssertion(X,A) #passive \ owlClassAssertion(X,A) <=> true ;;
owlObjectPropertyAssertion(X,P,Y) #passive \ owlObjectPropertyAssertion(X,P,Y) <=> true ;;
owlEquivalentClass(A,B) #passive \ owlEquivalentClass(A,B) <=> true ;;
owlEquivalentProperty(A,B) #passive \ owlEquivalentProperty(A,B) <=> true ;;


//onto validity
//owlDisjointClass(L) is true if the vector of classes are disjoin
DisjointClass @ owlDisjointClass(L), owlClassAssertion(X,A), owlClassAssertion(X,B) <=>  contains(A,L) && contains(B,L) | failure();;
//owlNegativeObjectAssertion(X,P,Y) is true if the two individuals X,Y are not connected by the property P
NegativeObjectAssertion @ owlNegativeObjectAssertion(X,P,Y),owlObjectPropertyAssertion(X,P,Y) <=> failure() ;;
//owlDisjointObjectProperty(L) is true if the list of properties L are disjoin
DisjointProperty @ owlDisjointObjectProperty(L),owlObjectPropertyAssertion(X,P1,Y),owlObjectPropertyAssertion(X,P2,Y) <=> contains(P1,L) && contains(P2,L) | failure() ;;
//owlIrreflexiveObjectProperty(P) is true if the property P is an irreflexive object property
irreflexiveProperty @ owlIrreflexiveObjectProperty(P),owlObjectPropertyAssertion(X,P,X)<=> failure();;


//onto schema inference

// SubClassOf
owlClass(A) ==> owlSubclassOf(A,A);;
owlSubclassOf(A,B), owlSubclassOf(B,C) ==> guard_condition(A,B,C) | owlSubclassOf(A,C);;

// Equivalent classes
owlClass(C) ==>  owlEquivalentClass(C,C);;
owlEquivalentClass(A,B) ==> different(A,B) | owlSubclassOf(A,B), owlSubclassOf(B,A);;
owlSubclassOf(A,B), owlSubclassOf(B,A) ==> different(A,B) | owlEquivalentClass(A,B);;

// Thing et Nothing
owlClass(C) ==>  owlSubclassOf(C,owlThing);;
owlClass(C) ==>  owlSubclassOf(owlNothing,C);;

//property
owlObjectProperty(P) ==> owlSubPropertyOf(P,P), owlEquivalentProperty(P,P);;
owlDataProperty(P) ==> owlSubPropertyOf(P,P), owlEquivalentProperty(P,P);;
owlSubPropertyOf(A,B), owlSubPropertyOf(B,C) ==> guard_condition(A,B,C) | owlSubPropertyOf(A,C);;
owlEquivalentProperty(A,B) ==> different(A,B) | owlSubPropertyOf(A,B), owlSubPropertyOf(B,A);;
owlSubPropertyOf(A,B), owlSubPropertyOf(B,A) ==> different(A,B) | owlEquivalentProperty(A,B);;


//domain et range
owlObjectPropertyDomain(P,C1), owlSubclassOf(C1,C2) ==> different(C1,C2) | owlObjectPropertyDomain(P,C2);;
owlObjectPropertyDomain(P2,C), owlSubPropertyOf(P1,P2) ==> different(P1,P2) | owlObjectPropertyDomain(P1,C);;
owlObjectPropertyRange(P,C1), owlSubclassOf(C1,C2) ==> different(C1,C2) | owlObjectPropertyRange(P,C2);;
owlObjectPropertyRange(P2,C), owlSubPropertyOf(P1,P2) ==>  different(P1,P2) | owlObjectPropertyRange(P1,C);;


//owlClassAssertion(X,A) is true if X is an instance of A
//owlSubclassOf(A,B) is true if A is a subclass of B
subclass @ owlSubclassOf(A,B) ,owlClassAssertion(X,A) ==> different(A,B) |  owlClassAssertion(X,B) ;;

//owlEquivalentClass(A,B) is true if the class A is equivalent with the class B
equivalentClass @ owlEquivalentClass(A,B),owlClassAssertion(X,A) ==> different(A,B) |owlClassAssertion(X,B);;

//ObjectPropertyAssertion(X,P,Y) is true if the individual X has the property P with the value Y
// owlSubPropertyOf(P2,P1)  is true if P2 is a subPropertyof the property P1
subproperty @ owlSubPropertyOf(P2,P1) , owlObjectPropertyAssertion(X,P2,Y) ==> different(P2,P1) | owlObjectPropertyAssertion(X,P1,Y) ;;

//owlObjectPropertyDomain(P,DP) is true if the property P has the domain DP (an object)
//owlObjectPropertyRange(P,DP) is true if the property P has the range DP (an object)
objectPropertydomain @ owlObjectPropertyDomain(P,DP) , owlObjectPropertyAssertion(X,P,Y) ==> owlClassAssertion(X,DP) ;;
objectPropertyCoDomain @ owlObjectPropertyRange(P,DP) , owlObjectPropertyAssertion(X,P,Y) ==> owlClassAssertion(Y,DP) ;;

//owlSameIndividual(X,Y) is true if X and Y refer to (denote) the same individual
sameIndividual @ owlSameIndividual(X,Y) ==> different(X,Y) | X %= Y ;;

//owlDifferentIndividual(X,Y) is true if it's excluded that X and Y are the same individual
DifferentIndividual @ owlDifferentIndividual(X,Y) ,owlSameIndividual(X,Y) <=>  failure();;

//owlInverseObjectProperty( P1,P2 ) is true if P1 is the inverse object property of P2
inverseProperty @ owlInverseObjectProperty(P1,P2) , owlObjectPropertyAssertion(X,P1,Y) ==> owlObjectPropertyAssertion(Y,P2,X);;
owlInverseObjectProperty(P1,P2) ==> owlInverseObjectProperty(P2,P1)  ;;

//owlSymmetricObjectProperty(P) is true if P is a symmetric object property
symmetricProperty @ owlSymmetricObjectProperty(P),owlObjectPropertyAssertion(X,P,Y) ==> owlObjectPropertyAssertion(Y,P,X) ;;

//owlAsymmetricObjectProperty(P) is true if P is an asymmetric object property
AsymmetricProperty1 @ owlAsymmetricObjectProperty(P),owlObjectPropertyAssertion(X,P,Y) ==> owlNegativeObjectAssertion(X,P,Y) ;;

//owlreflexiveProperty(P) is true if P is a reflexive object property
reflexiveProperty @ owlReflexiveObjectProperty(P),owlObjectPropertyAssertion(X,P,Y) ==> owlObjectPropertyAssertion(X,P,X),owlObjectPropertyAssertion(Y,P,Y);;

//owlFunctionalObjectProperty(P) is true if P is a functional object property
functionalProperty @ owlFunctionalObjectProperty(P),owlObjectPropertyAssertion(X,P,Y),owlObjectPropertyAssertion(X,P,Z) ==> different(Y,Z) | owlSameIndividual(Y,Z);;

//owlInverseFunctionalObjectProperty(P) is true if P is an inverse functional object property
inverseFunctional @ owlInverseFunctionalObjectProperty(P),owlObjectPropertyAssertion(X,P,Z),owlObjectPropertyAssertion(Y,P,Z) ==> different(X,Y) | owlSameIndividual(X,Y);;

//owlTransitiveObjectProperty(P) is true if P is a transitive object property
transitiveProperty @ owlTransitiveObjectProperty(P),owlObjectPropertyAssertion(X,P,Y),owlObjectPropertyAssertion(Y,P,Z) ==> guard_condition(X,Y,Z) | owlObjectPropertyAssertion(X,P,Z);;

//querries
//querySuperClassOf recupere toutes les super classes d'une classe ainsi que leur superClass jusqu'a la racine
querySuperClassOf(X)\ owlSubclassOf(X,Y) <=> different(X,Y) | res(Y) , querySuperClassOf(Y) ;;
querySuperClassOf(X) <=> res(X) ;;
res(X) ==> afficher(X);;

//querySubClassOf recupere toutes les sous classes d'une classe
querySubClassOf(X) \ owlSubclassOf(Y,X) <=> different(X,Y) | res(Y) , querySubClassOf(Y) ;;
querySubClassOf(X) <=> res(X) ;;

//queryClassification prend en paramettre un indivus et recupere toutes les classes dont elle est instance
queryClassification(X) , owlClassAssertion(X,C) ==> res(C) ;;
queryClassification(X) <=> success() ;;

//test de parcour de liste (penser a rechanger nbr argument constraint)
//pop(ITEND,ITEND) <=> success();;
//pop(IT,ITEND)==> liste(IT,**IT),pop(*IT+1,ITEND);;
//liste(IT,V)  ==> afficher(V);;

//test parcour liste avec indice
//popInd(ITEND,ITEND,I) <=> success() ;;
//popInd(IT,ITEND,I)==> listeInd(IT,**IT,I),popInd(*IT+1,ITEND,I+1) ;;
//listeInd(IT,V,I)  ==> afficher(V), afficherIndice(I) ;;

//unionOf avec liste
owlUnionOf(C,ITEND,ITEND) <=> success();;
owlUnionOf(C,IT,ITEND) <=> owlUnionClass(C,**IT),owlUnionOf(C,*IT+1,ITEND);;
owlUnionClass(C,V) , owlClassAssertion(X,V) ==> owlClassAssertion(X,C);;

//intersectionOf avec liste


//on parcour les classes 

r1 @ owlIntersectionOf(C,IT,ITEND,I) <=> IT!=ITEND | owlIntersectionClass(C,**IT,I),owlIntersectionOf(C,*IT+1,ITEND,I+1);;

//au premier tour (premiere classe trouvé) on ajoute tout les individus de la premiere classe :comme candidats

r2 @ owlClassAssertion(X,V) , owlIntersectionClass(C,V,0) ==> owlCandidatsIntersection(X,C,0) ;;

//si l'individus appartient à la nouvelle classe et qu'il etait candidate ,il reste candidat au prochain tour

r3 @ owlIntersectionClass(C,V,I) , owlCandidatsIntersection(X,C,I) ,owlClassAssertion(X,V)  ==> owlCandidatsIntersection(X,C,I+1) ;;

//on ajoute les candidats finaux a la classe construite

r5 @ owlIntersectionOf(C,ITEND,ITEND,I) \ owlCandidatsIntersection(X,C,I)  <=> owlClassAssertion(X,C)  ;;
//si on est arrive ici on peut supprimer les calcul des tours prealable

r4 @ owlIntersectionOf(C,ITEND,ITEND,I) , owlCandidatsIntersection(X,C,J)  <=>  success()  ;;

//inference sense inverse
owlIntersectionClass(C,C1,_),owlClassAssertion(X,C) ==> owlClassAssertion(X,C1) ;;
</CHR>
*/

namespace chr {

template <>
struct Type_instruction_wrapper<Value, false> {
    static std::string to_string(const Value& v) {
        return "Value(" + v.val + ")";
    }

    static void update_hash(const Value& v) {
        XXHash<std::string>::update(v.val); // ou adapte selon ta logique de hachage
    }

    static bool is_equal(const Value& a, const Value& b) {
        return a.val == b.val;
    }
};

}


template <typename T>
void print(T& pb)
{

    auto it = pb.chr_store_begin();
    while (!it.at_end())
    {
        std::cout << it.to_string() << std::endl;
        ++it;
    }

}

int main()
{
    TRACE(chr::Log::register_flags(chr::Log::ALL);)
    std::vector<std::string> classes={"c1","c2"};
    auto space = OWL2::create();

    // === Injection de faits OWL ===
    CHR_RUN(
  // space->pop(classes.begin(),classes.end());
 //  space->owlUnionOf(std::string("C"),classes.begin(),classes.end());
   space->owlClassAssertion(std::string("X"),std::string("c1"));
   space->owlClassAssertion(std::string("Y"),std::string("c1"));
  // space->owlClassAssertion(std::string("Z"),std::string("c1"));
   space->owlClassAssertion(std::string("Y"),std::string("c2"));
   //space->owlClassAssertion(std::string("Z"),std::string("c2"));
  // space->owlClassAssertion(std::string("Y"),std::string("c3"));
  // space->popInd(classes.begin(),classes.end(),0)
   space->owlIntersectionOf(std::string("C"),classes.begin(),classes.end(),0);
   space->owlClassAssertion(std::string("k"),std::string("C"));
   space->queryClassification(std::string("k"));
  )

   print(*space);
    chr::Statistics::print(std::cout);

    return 0;
}
